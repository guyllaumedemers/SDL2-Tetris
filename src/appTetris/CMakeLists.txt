set(
	MYLANGUAGES
	CXX
)

project(
	Demo
    	VERSION 0.0.0.0
    	DESCRIPTION "Demo"
    	LANGUAGES ${MYLANGUAGES}
)

add_executable(
	${PROJECT_NAME}
	Main.cpp
)

add_dependencies(
	${PROJECT_NAME}
	lib::imgui
	lib::sdl2
)

target_link_libraries(
	${PROJECT_NAME}
	PUBLIC
	lib::imgui
	lib::sdl2
)

# set project specifics

set(
	MYCXX_VERSION_STANDARD
	20
)

set_property(
	TARGET
	${PROJECT_NAME}
	PROPERTY
	CMAKE_CXX_STANDARD
	${MYCXX_VERSION_STANDARD}
)

if(NOT ${CMAKE_CXX_STANDARD} EQUAL ${MYCXX_VERSION_STANDARD})
	message(WARNING "WARNING! CXX_STANDARD SHOULD BE CXX_${MYCXX_VERSION_STANDARD}, CURRENTLY : ${CMAKE_CXX_STANDARD}")
else()
	message(WARNING "WARNING! CXX_STANDARD IS CXX_${CMAKE_CXX_STANDARD}")	# why this doesnt print?
endif()

set(
	CMAKE_CXX_STANDARD_REQUIRED
	ON
)

if(${CMAKE_CXX_STANDARD_REQUIRED})
	message(WARNING "WARNING! CXX_STANDARD_REQUIRED IS ${CMAKE_CXX_STANDARD_REQUIRED}. MAKE SURE YOU HAVE THE LATEST COMPILER VERSION SUPPORTING THE CURRENT REQUIREMENTS FOR CXX_${CMAKE_CXX_STANDARD}")
endif()

set(
	CMAKE_CXX_EXTENSIONS
	OFF
)

if(NOT ${CMAKE_CXX_EXTENSIONS})
	message(WARNING "WARNING! CXX_EXTENSIONS IS ${CMAKE_CXX_EXTENSIONS}!")
endif()

# check support for LINK Time Optimization between translation units

include(CheckIPOSupported)

check_ipo_supported(
	RESULT
	IS_IPO_SUPPORTED
	OUTPUT
	IPO_SUPPORT_LOG_OUTPUT
	LANGUAGES
	${MYLANGUAGES}
)

if(NOT ${IS_IPO_SUPPORTED})
	message(WARNING "IPO ADD ON SUPPORTED : ${IS_IPO_SUPPORTED}. ${IPO_SUPPORT_LOG_OUTPUT}")
else()
	set(
		CMAKE_INTERPROCEDURAL_OPTIMIZATION
		TRUE
	)
endif()

# check compiler features supported

set(
	PRINT_UNSUPPORTED_COMPILE_FEATURES
	FALSE
)

if(${PRINT_UNSUPPORTED_COMPILE_FEATURES})
	foreach(VAR IN LISTS CMAKE_CXX_COMPILE_FEATURES)
		list(FIND CMAKE_CXX_COMPILE_FEATURES ${VAR} RESULT COMPILE_FEATURE_SUPPORT_RESULT)
		if(NOT ${COMPILE_FEATURE_SUPPORT_RESULT})
			message(WARNING "WARNING! FEATURE NOT SUPPORTED : ${VAR}")
		endif()
	endforeach()
endif()

# run try catch on dependencies

set(
	APP_TETRIS_TEST_BINARY_DIR
	"${PROJECT_BINARY_DIR}/test"
)

set(
	TARGET_TRY_RUN
	"${PROJECT_SOURCE_DIR}/Main.cpp"
)

# try_run cannot use ALIAS for some reason. target_link_libraries however allow such setup
# try_run doesn't allow OBJECTlib which means I can only create another lib that capture the TARGET_OBJECTS thru transitive property

try_run(
	MAIN_CPP_RUN_RESULT
	MAIN_CPP_COMPILE_RESULT
	"${APP_TETRIS_TEST_BINARY_DIR}"
	"${TARGET_TRY_RUN}"
	LINK_LIBRARIES
	tryRunlibImGUI
	tryRunlibSDL2
	COMPILE_OUTPUT_VARIABLE
	TRY_COMPILE_LOG_OUTPUT
	RUN_OUTPUT_VARIABLE
	TRY_RUN_LOG_OUTPUT
)

if(NOT ${MAIN_CPP_COMPILE_RESULT})
	message(SEND_ERROR "SEND_ERROR! TARGET TRY COMPILATION FAILED : ${TARGET_TRY_RUN}, COMPILE OUTPUT : ${TRY_COMPILE_LOG_OUTPUT}, RUN OUTPUT : ${TRY_RUN_LOG_OUTPUT}")
elseif(NOT ${MAIN_CPP_RUN_RESULT})
	message(SEND_ERROR "SEND_ERROR! TARGET TRY RUN FAILED : ${TARGET_TRY_RUN}, COMPILE OUTPUT : ${TRY_COMPILE_LOG_OUTPUT}, RUN OUTPUT : ${TRY_RUN_LOG_OUTPUT}")
endif()
